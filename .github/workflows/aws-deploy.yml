name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check TypeScript
      run: npm run check
      
    - name: Generate Migrations
      run: npm run generate
      
    - name: Build application
      run: npm run build
      
    - name: Cache build artifacts
      uses: actions/cache@v3
      with:
        path: |
          dist
          client/dist
          migrations
        key: ${{ runner.os }}-eb-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-eb-build-
      
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Restore cached build artifacts
      uses: actions/cache@v3
      with:
        path: |
          dist
          client/dist
          migrations
        key: ${{ runner.os }}-eb-build-${{ github.sha }}
        
    - name: Generate deployment package
      run: |
        mkdir -p deploy
        if [ -d "dist" ]; then
          cp -r dist deploy/
        else
          echo "::warning::Build directory not found. Check build step output."
        fi
        if [ -d "migrations" ]; then
          cp -r migrations deploy/
        else
          echo "::warning::Migrations directory not found. Database migrations may fail."
        fi
        cp -r scripts deploy/
        cp -r .ebextensions deploy/
        cp -r public deploy/
        cp package.json package-lock.json Procfile deploy/
        cd deploy && zip -r ../deploy.zip .
      
    - name: Set Environment Name
      id: env-name
      run: |
        if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
          echo "env_name=kitcho-family-staging" >> $GITHUB_OUTPUT
        elif [ "${{ github.event.inputs.environment }}" == "development" ]; then
          echo "env_name=kitcho-family-dev" >> $GITHUB_OUTPUT
        else
          echo "env_name=kitcho-family-production" >> $GITHUB_OUTPUT
        fi
      
    - name: Deploy to Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v21
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: kitcho-family
        environment_name: ${{ steps.env-name.outputs.env_name }}
        version_label: kitcho-family-${{ github.sha }}
        region: ${{ secrets.AWS_REGION }}
        deployment_package: deploy.zip
        wait_for_environment_recovery: 300
        
    - name: Post-deployment health check
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 60
        
        HEALTH_URL="http://${{ steps.env-name.outputs.env_name }}.elasticbeanstalk.com/healthz"
        echo "Running health check against $HEALTH_URL"
        MAX_RETRIES=10
        RETRY_COUNT=0
        
        until curl -s -f "$HEALTH_URL" || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
          echo "Health check failed, retrying in 30 seconds (Attempt $((RETRY_COUNT+1))/$MAX_RETRIES)..."
          sleep 30
          RETRY_COUNT=$((RETRY_COUNT + 1))
        done
        
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "::warning::Health check failed after $MAX_RETRIES attempts"
          
          # Try more detailed health check
          DETAILED_HEALTH_URL="http://${{ steps.env-name.outputs.env_name }}.elasticbeanstalk.com/api/health"
          echo "Checking detailed health status at $DETAILED_HEALTH_URL..."
          curl -v "$DETAILED_HEALTH_URL" || echo "Detailed health check also failed"
          
          echo "Deployment may still be in progress. Check AWS Elastic Beanstalk console."
          # Don't fail the workflow, but indicate in the logs that health check failed
        else
          echo "::notice::Health check successful! Application is running properly."
          # Check database connection
          DB_HEALTH_URL="http://${{ steps.env-name.outputs.env_name }}.elasticbeanstalk.com/api/health/db"
          echo "Checking database connection..."
          curl -s "$DB_HEALTH_URL" || echo "Database health check couldn't be performed"
        fi
      continue-on-error: true
      
    - name: Notify deployment completion
      run: |
        APP_URL="http://${{ steps.env-name.outputs.env_name }}.elasticbeanstalk.com"
        echo "::notice::Deployment to AWS Elastic Beanstalk complete! Application is available at: $APP_URL"
      continue-on-error: true